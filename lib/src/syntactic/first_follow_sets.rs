use std::collections::HashMap;

use crate::lexical::tokens::token_type::Type;

// This should be a compile-time static collection but I don't wanna install any crates to see how far I can go
pub fn get_first_set_table() -> HashMap<&'static str, Vec<Type>> {
    HashMap::from([
        ("START", vec![Type::EndOfFile, Type::Class, Type::Function]),
        ("ARRAYSIZE2", vec![Type::IntNum(0), Type::CloseSqbr]),
        ("CLASSDECL", vec![Type::Class]),
        (
            "EXPR2",
            vec![
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
            ],
        ),
        ("FACTOR2", vec![Type::OpenPar, Type::OpenSqbr]),
        ("FUNCDEF", vec![Type::Function]),
        ("FUNCBODY", vec![Type::OpenCubr]),
        ("FUNCHEAD", vec![Type::Function]),
        ("FUNCHEADTAIL", vec![Type::ScopeOp, Type::OpenPar]),
        (
            "FUNCHEADMEMBERTAIL",
            vec![Type::Id(String::from("")), Type::Constructor],
        ),
        ("IDNEST2", vec![Type::OpenPar, Type::OpenSqbr]),
        ("ARRAYOROBJECT", vec![Type::OpenPar, Type::OpenSqbr]),
        ("LOCALVARDECL", vec![Type::LocalVar]),
        ("MEMBERFUNCDECL", vec![Type::Function, Type::Constructor]),
        ("MEMBERFUNCHEAD", vec![Type::Function, Type::Constructor]),
        ("FPARAMS", vec![Type::Id(String::from(""))]),
        ("MEMBERVARDECL", vec![Type::Attribute]),
        ("OPTINHERITS", vec![Type::IsA]),
        ("PROG", vec![Type::Class, Type::Function]),
        (
            "ARITHEXPR",
            vec![
                Type::Id(String::from("")),
                Type::IntNum(0),
                Type::FloatNum(0f64),
                Type::OpenPar,
                Type::Not,
                Type::Plus,
                Type::Minus,
            ],
        ),
        (
            "RELOP",
            vec![
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
            ],
        ),
        ("APARAMSTAIL", vec![Type::Comma]),
        ("REPTAPARAMS1", vec![Type::Comma]),
        ("REPTARRAYSIZE", vec![Type::OpenSqbr]),
        ("REPTFPARAMS3", vec![Type::OpenSqbr]),
        ("FPARAMSTAIL", vec![Type::Comma]),
        ("REPTFPARAMS4", vec![Type::Comma]),
        ("ARRAYSIZE", vec![Type::OpenSqbr]),
        ("REPTFPARAMSTAIL4", vec![Type::OpenSqbr]),
        ("REPTINHERITSLIST", vec![Type::Comma]),
        (
            "LOCALVARORSTAT",
            vec![
                Type::LocalVar,
                Type::Id(String::from("")),
                Type::If,
                Type::While,
                Type::Read,
                Type::Write,
                Type::Return,
            ],
        ),
        (
            "REPTLOCALVARORSTAT",
            vec![
                Type::LocalVar,
                Type::Id(String::from("")),
                Type::If,
                Type::While,
                Type::Read,
                Type::Write,
                Type::Return,
            ],
        ),
        (
            "MEMBERDECL",
            vec![Type::Attribute, Type::Function, Type::Constructor],
        ),
        ("REPTMEMBERDECL", vec![Type::Public, Type::Private]),
        ("CLASSDECLORFUNCDEF", vec![Type::Class, Type::Function]),
        ("REPTPROG0", vec![Type::Class, Type::Function]),
        ("IDNEST", vec![Type::Dot]),
        ("REPTVARIABLEORFUNCTIONCALL", vec![Type::Dot]),
        (
            "RETURNTYPE",
            vec![
                Type::Void,
                Type::Integer,
                Type::Float,
                Type::Id(String::from("")),
            ],
        ),
        ("ADDOP", vec![Type::Plus, Type::Minus, Type::Or]),
        ("RIGHTRECARITHEXPR", vec![Type::Plus, Type::Minus, Type::Or]),
        ("MULTOP", vec![Type::Mult, Type::Div, Type::And]),
        ("SIGN", vec![Type::Plus, Type::Minus]),
        (
            "REPTSTATBLOCK1",
            vec![
                Type::Id(String::from("")),
                Type::If,
                Type::While,
                Type::Read,
                Type::Write,
                Type::Return,
            ],
        ),
        (
            "STATEMENT",
            vec![
                Type::Id(String::from("")),
                Type::If,
                Type::While,
                Type::Read,
                Type::Write,
                Type::Return,
            ],
        ),
        (
            "RELEXPR",
            vec![
                Type::Id(String::from("")),
                Type::IntNum(0),
                Type::FloatNum(0f64),
                Type::OpenPar,
                Type::Not,
                Type::Plus,
                Type::Minus,
            ],
        ),
        (
            "STATBLOCK",
            vec![
                Type::OpenCubr,
                Type::Id(String::from("")),
                Type::If,
                Type::While,
                Type::Read,
                Type::Write,
                Type::Return,
            ],
        ),
        ("INDICE", vec![Type::OpenSqbr]),
        ("STATEMENTIDNEST2", vec![Type::Dot]),
        ("STATEMENTIDNEST3", vec![Type::Dot, Type::Assign]),
        ("ASSIGNOP", vec![Type::Assign]),
        (
            "EXPR",
            vec![
                Type::Id(String::from("")),
                Type::IntNum(0),
                Type::FloatNum(0f64),
                Type::OpenPar,
                Type::Not,
                Type::Plus,
                Type::Minus,
            ],
        ),
        (
            "STATEMENTIDNEST",
            vec![Type::Dot, Type::OpenPar, Type::OpenSqbr, Type::Assign],
        ),
        (
            "TERM",
            vec![
                Type::Id(String::from("")),
                Type::IntNum(0),
                Type::FloatNum(0f64),
                Type::OpenPar,
                Type::Not,
                Type::Plus,
                Type::Minus,
            ],
        ),
        (
            "FACTOR",
            vec![
                Type::Id(String::from("")),
                Type::IntNum(0),
                Type::FloatNum(0f64),
                Type::OpenPar,
                Type::Not,
                Type::Plus,
                Type::Minus,
            ],
        ),
        ("RIGHTRECTERM", vec![Type::Mult, Type::Div, Type::And]),
        (
            "TYPE",
            vec![Type::Integer, Type::Float, Type::Id(String::from(""))],
        ),
        ("VARIABLE", vec![Type::Id(String::from(""))]),
        ("VARIABLE2", vec![Type::OpenPar, Type::OpenSqbr, Type::Dot]),
        ("REPTVARIABLE", vec![Type::Dot]),
        ("VARIDNEST2", vec![Type::OpenPar, Type::OpenSqbr]),
        (
            "APARAMS",
            vec![
                Type::Id(String::from("")),
                Type::IntNum(0),
                Type::FloatNum(0f64),
                Type::OpenPar,
                Type::Not,
                Type::Plus,
                Type::Minus,
            ],
        ),
        ("VARIDNEST", vec![Type::Dot]),
        ("REPTIDNEST1", vec![Type::OpenSqbr]),
        ("VISIBILITY", vec![Type::Public, Type::Private]),
    ])
}

pub fn get_follow_set_table() -> HashMap<&'static str, Vec<Type>> {
    HashMap::from([
        ("START", vec![]),
        (
            "ARRAYSIZE2",
            vec![Type::OpenSqbr, Type::Semi, Type::ClosePar, Type::Comma],
        ),
        (
            "CLASSDECL",
            vec![Type::Class, Type::Function, Type::EndOfFile],
        ),
        ("EXPR2", vec![Type::Semi, Type::Comma, Type::ClosePar]),
        (
            "FACTOR2",
            vec![
                Type::Semi,
                Type::Mult,
                Type::Div,
                Type::And,
                Type::Dot,
                Type::CloseSqbr,
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
                Type::Plus,
                Type::Minus,
                Type::Or,
                Type::Comma,
                Type::ClosePar,
            ],
        ),
        (
            "FUNCDEF",
            vec![Type::Class, Type::Function, Type::EndOfFile],
        ),
        (
            "FUNCBODY",
            vec![Type::Class, Type::Function, Type::EndOfFile],
        ),
        ("FUNCHEAD", vec![Type::OpenCubr]),
        ("FUNCHEADTAIL", vec![Type::OpenCubr]),
        ("FUNCHEADMEMBERTAIL", vec![Type::OpenCubr]),
        (
            "IDNEST2",
            vec![
                Type::Semi,
                Type::Mult,
                Type::Div,
                Type::And,
                Type::Dot,
                Type::CloseSqbr,
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
                Type::Plus,
                Type::Minus,
                Type::Or,
                Type::Comma,
                Type::ClosePar,
            ],
        ),
        ("ARRAYOROBJECT", vec![Type::Semi]),
        (
            "LOCALVARDECL",
            vec![
                Type::LocalVar,
                Type::Id(String::from("")),
                Type::If,
                Type::While,
                Type::Read,
                Type::Write,
                Type::Return,
                Type::CloseCubr,
            ],
        ),
        (
            "MEMBERFUNCDECL",
            vec![Type::Public, Type::Private, Type::CloseCubr],
        ),
        ("MEMBERFUNCHEAD", vec![Type::Semi]),
        ("FPARAMS", vec![Type::ClosePar]),
        (
            "MEMBERVARDECL",
            vec![Type::Public, Type::Private, Type::CloseCubr],
        ),
        ("OPTINHERITS", vec![Type::OpenCubr]),
        ("PROG", vec![Type::EndOfFile]),
        (
            "ARITHEXPR",
            vec![
                Type::Semi,
                Type::CloseSqbr,
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
                Type::Comma,
                Type::ClosePar,
            ],
        ),
        (
            "RELOP",
            vec![
                Type::Id(String::from("")),
                Type::IntNum(0),
                Type::FloatNum(0f64),
                Type::OpenPar,
                Type::Not,
                Type::Plus,
                Type::Minus,
            ],
        ),
        ("APARAMSTAIL", vec![Type::Comma, Type::ClosePar]),
        ("REPTAPARAMS1", vec![Type::ClosePar]),
        ("REPTARRAYSIZE", vec![Type::Semi]),
        ("REPTFPARAMS3", vec![Type::ClosePar, Type::Comma]),
        ("FPARAMSTAIL", vec![Type::Comma, Type::ClosePar]),
        ("REPTFPARAMS4", vec![Type::ClosePar]),
        (
            "ARRAYSIZE",
            vec![Type::OpenSqbr, Type::Semi, Type::ClosePar, Type::Comma],
        ),
        ("REPTFPARAMSTAIL4", vec![Type::Comma, Type::ClosePar]),
        ("REPTINHERITSLIST", vec![Type::OpenCubr]),
        (
            "LOCALVARORSTAT",
            vec![
                Type::LocalVar,
                Type::Id(String::from("")),
                Type::If,
                Type::While,
                Type::Read,
                Type::Write,
                Type::Return,
                Type::CloseCubr,
            ],
        ),
        ("REPTLOCALVARORSTAT", vec![Type::CloseCubr]),
        (
            "MEMBERDECL",
            vec![Type::Public, Type::Private, Type::CloseCubr],
        ),
        ("REPTMEMBERDECL", vec![Type::CloseCubr]),
        (
            "CLASSDECLORFUNCDEF",
            vec![Type::Class, Type::Function, Type::EndOfFile],
        ),
        ("REPTPROG0", vec![Type::EndOfFile]),
        (
            "IDNEST",
            vec![
                Type::Semi,
                Type::Mult,
                Type::Div,
                Type::And,
                Type::Dot,
                Type::CloseSqbr,
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
                Type::Plus,
                Type::Minus,
                Type::Or,
                Type::Comma,
                Type::ClosePar,
            ],
        ),
        (
            "REPTVARIABLEORFUNCTIONCALL",
            vec![
                Type::Semi,
                Type::Mult,
                Type::Div,
                Type::And,
                Type::CloseSqbr,
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
                Type::Plus,
                Type::Minus,
                Type::Or,
                Type::Comma,
                Type::ClosePar,
            ],
        ),
        ("RETURNTYPE", vec![Type::Semi, Type::OpenCubr]),
        (
            "ADDOP",
            vec![
                Type::Id(String::from("")),
                Type::IntNum(0),
                Type::FloatNum(0f64),
                Type::OpenPar,
                Type::Not,
                Type::Plus,
                Type::Minus,
            ],
        ),
        (
            "RIGHTRECARITHEXPR",
            vec![
                Type::Semi,
                Type::CloseSqbr,
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
                Type::Comma,
                Type::ClosePar,
            ],
        ),
        (
            "MULTOP",
            vec![
                Type::Id(String::from("")),
                Type::IntNum(0),
                Type::FloatNum(0f64),
                Type::OpenPar,
                Type::Not,
                Type::Plus,
                Type::Minus,
            ],
        ),
        (
            "SIGN",
            vec![
                Type::Id(String::from("")),
                Type::IntNum(0),
                Type::FloatNum(0f64),
                Type::OpenPar,
                Type::Not,
                Type::Plus,
                Type::Minus,
            ],
        ),
        ("REPTSTATBLOCK1", vec![Type::CloseCubr]),
        (
            "STATEMENT",
            vec![
                Type::Else,
                Type::Semi,
                Type::LocalVar,
                Type::Id(String::from("")),
                Type::If,
                Type::While,
                Type::Read,
                Type::Write,
                Type::Return,
                Type::CloseCubr,
            ],
        ),
        ("RELEXPR", vec![Type::ClosePar]),
        ("STATBLOCK", vec![Type::Else, Type::Semi]),
        (
            "INDICE",
            vec![
                Type::Semi,
                Type::Mult,
                Type::Div,
                Type::And,
                Type::OpenSqbr,
                Type::Assign,
                Type::Dot,
                Type::CloseSqbr,
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
                Type::Plus,
                Type::Minus,
                Type::Or,
                Type::Comma,
                Type::ClosePar,
            ],
        ),
        ("STATEMENTIDNEST2", vec![Type::Semi]),
        ("STATEMENTIDNEST3", vec![Type::Semi]),
        (
            "ASSIGNOP",
            vec![
                Type::Id(String::from("")),
                Type::IntNum(0),
                Type::FloatNum(0f64),
                Type::OpenPar,
                Type::Not,
                Type::Plus,
                Type::Minus,
            ],
        ),
        ("EXPR", vec![Type::Semi, Type::Comma, Type::ClosePar]),
        ("STATEMENTIDNEST", vec![Type::Semi]),
        (
            "TERM",
            vec![
                Type::Semi,
                Type::CloseSqbr,
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
                Type::Plus,
                Type::Minus,
                Type::Or,
                Type::Comma,
                Type::ClosePar,
            ],
        ),
        (
            "FACTOR",
            vec![
                Type::Semi,
                Type::Mult,
                Type::Div,
                Type::And,
                Type::CloseSqbr,
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
                Type::Plus,
                Type::Minus,
                Type::Or,
                Type::Comma,
                Type::ClosePar,
            ],
        ),
        (
            "RIGHTRECTERM",
            vec![
                Type::Semi,
                Type::CloseSqbr,
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
                Type::Plus,
                Type::Minus,
                Type::Or,
                Type::Comma,
                Type::ClosePar,
            ],
        ),
        (
            "TYPE",
            vec![
                Type::ClosePar,
                Type::OpenCubr,
                Type::Comma,
                Type::OpenPar,
                Type::OpenSqbr,
                Type::Semi,
            ],
        ),
        ("VARIABLE", vec![Type::ClosePar]),
        ("VARIABLE2", vec![Type::ClosePar]),
        ("REPTVARIABLE", vec![Type::ClosePar]),
        ("VARIDNEST2", vec![Type::ClosePar, Type::Dot]),
        ("APARAMS", vec![Type::ClosePar]),
        ("VARIDNEST", vec![Type::ClosePar, Type::Dot]),
        (
            "REPTIDNEST1",
            vec![
                Type::Assign,
                Type::Semi,
                Type::Mult,
                Type::Div,
                Type::And,
                Type::Dot,
                Type::CloseSqbr,
                Type::Eq,
                Type::NotEq,
                Type::Lt,
                Type::Gt,
                Type::LEq,
                Type::GEq,
                Type::Plus,
                Type::Minus,
                Type::Or,
                Type::Comma,
                Type::ClosePar,
            ],
        ),
        (
            "VISIBILITY",
            vec![Type::Attribute, Type::Function, Type::Constructor],
        ),
    ])
}
